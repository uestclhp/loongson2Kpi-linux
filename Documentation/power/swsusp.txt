Some warnings, first.

 * BIG FAT WARNING *********************************************************
 *
 * If you touch anything on disk between suspend and resume...
 *				...kiss your data goodbye.
 * 如果你在挂起和恢复期间触碰了磁盘上的任何东西。。。和你的数据说拜拜吧。
 *
 * If you do resume from initrd after your filesystems are mounted...
 *				...bye bye root partition.
 *			[this is actually same case as above]
 * 如果你在你的文件系统挂载后从initrd中resume。。。再见了root分区
 *
 * If you have unsupported (*) devices using DMA, you may have some
 * problems. If your disk driver does not support suspend... (IDE does),
 * it may cause some problems, too. If you change kernel command line
 * between suspend and resume, it may do something wrong. If you change
 * your hardware while system is suspended... well, it was not good idea;
 * but it will probably only crash.
 * 如果你有不支持(*)的设备使用了DMA，可能会出现问题。如果你的磁盘驱动不支持挂起（IDE就是）。。。
 * 也会引起一些问题。如果你在挂起和恢复期间改变了内核命令行，可能会令某些东西产生错误。
 * 如果你在系统挂起后改变了硬件。。。呃，这不是个好主意；但可能只是造成crash。
 *
 * (*) suspend/resume support is needed to make it safe.
 * (*) 加星号部分表示，要使其安全，suspend/resume支持使必要的。
 *
 * If you have any filesystems on USB devices mounted before software suspend,
 * they won't be accessible after resume and you may lose data, as though
 * you have unplugged the USB devices with mounted filesystems on them;
 * see the FAQ below for details.  (This is not true for more traditional
 * power states like "standby", which normally don't turn USB off.)
 * 如果在软件挂起之前挂载了USB设备上的任何文件系统，则resume后将无法访问这些文件系统，
 * 并且您可能会丢失数据，就好像已经拔掉挂载了文件系统的USB设备一样; 
 * 有关详细信息，请参阅下面的FAQ （对于更常见的电源状态，例如"standby"，这通常不会关闭USB。）

You need to append resume=/dev/your_swap_partition to kernel command
line. Then you suspend by
你需要添加 resume=/dev/your_swap_partition 到内核命令行，然后你可以通过以下命令来执行挂起

echo shutdown > /sys/power/disk; echo disk > /sys/power/state

. If you feel ACPI works pretty well on your system, you might try
. 如果你的系统上ACPI工作的很好的话，你可以试试

echo platform > /sys/power/disk; echo disk > /sys/power/state

. If you would like to write hibernation image to swap and then suspend
to RAM (provided your platform supports it), you can try
. 如果想将休眠镜像写到交换区，然后挂起到RAM（假设你的平台支持），你可以

echo suspend > /sys/power/disk; echo disk > /sys/power/state

. If you have SATA disks, you'll need recent kernels with SATA suspend
support. For suspend and resume to work, make sure your disk drivers
are built into kernel -- not modules. [There's way to make
suspend/resume with modular disk drivers, see FAQ, but you probably
should not do that.]
. 如果用SATA磁盘，你需要最近的支持SATA挂起的内核。确保你的磁盘驱动编译进内核而不是编译成模块。
  （FAQ中有方法提到如何使用模块化的磁盘驱动来挂起/恢复，但是你不应该那么做。）

If you want to limit the suspend image size to N bytes, do
如果你想限制挂起镜像的大小在N字节内，在挂起之前（默认限制使500MB）：

echo N > /sys/power/image_size

before suspend (it is limited to 500 MB by default).


Article about goals and implementation of Software Suspend for Linux
关于Linux软件挂起的目的和实现的文章
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Author: Gábor Kuti
Last revised: 2003-10-20 by Pavel Machek

Idea and goals to achieve
想法和要实现的目标

Nowadays it is common in several laptops that they have a suspend button. It
saves the state of the machine to a filesystem or to a partition and switches
to standby mode. Later resuming the machine the saved state is loaded back to
ram and the machine can continue its work. It has two real benefits. First we
save ourselves the time machine goes down and later boots up, energy costs
are real high when running from batteries. The other gain is that we don't have to
interrupt our programs so processes that are calculating something for a long
time shouldn't need to be written interruptible.
当今，很常见笔记本有挂起按钮。它保存机器状态到文件系统或一个分区，并切换到standby模式。
之后，保存的状态被加载回ram并且机器继续工作。
有两个好处，1.加快开关机速度 2.我们不必中断那些需要很长时间计算的进程。

swsusp saves the state of the machine into active swaps and then reboots or
powerdowns.  You must explicitly specify the swap partition to resume from with
``resume='' kernel option. If signature is found it loads and restores saved
state. If the option ``noresume'' is specified as a boot parameter, it skips
the resuming.  If the option ``hibernate=nocompress'' is specified as a boot
parameter, it saves hibernation image without compression.
swsusp保存状态到活动的交换区然后重启或断电。你必须通过内核选项确定从哪个交换区恢复。如果找到签名，
它会加载并恢复保存的状态。如果启动参数指定为"noresume"，启动会跳过恢复过程。如果启动参数
指定"hibernate=nocompress"，保存休眠镜像时不会压缩。

In the meantime while the system is suspended you should not add/remove any
of the hardware, write to the filesystems, etc.
挂起系统时不可以增减硬件，写入文件系统等

Sleep states summary
睡眠状态总结
====================

There are three different interfaces you can use, /proc/acpi should
work like this:
您可以使用三种不同的接口，/proc/acpi应该像这样工作：

In a really perfect world:
echo 1 > /proc/acpi/sleep       # for standby
echo 2 > /proc/acpi/sleep       # for suspend to ram
echo 3 > /proc/acpi/sleep       # for suspend to ram, but with more power conservative
echo 4 > /proc/acpi/sleep       # for suspend to disk
echo 5 > /proc/acpi/sleep       # for shutdown unfriendly the system

and perhaps
echo 4b > /proc/acpi/sleep      # for suspend to disk via s4bios

Frequently Asked Questions
==========================

Q: well, suspending a server is IMHO a really stupid thing,
but... (Diego Zuccato):
   好吧，恕我直言，挂起服务器是一个非常愚蠢的事情，但......（Diego Zuccato）：

A: You bought new UPS for your server. How do you install it without
bringing machine down? Suspend to disk, rearrange power cables,
resume.
   您为服务器购买了新的UPS（不间断电源）。如何在不断电机器的情况下安装它？
   挂起到磁盘，重装电源线，恢复。

You have your server on UPS. Power died, and UPS is indicating 30
seconds to failure. What do you do? Suspend to disk.
您的服务器连接在UPS上。电源耗尽，UPS指示30秒后断电。咋办？挂起到磁盘。

Q: Maybe I'm missing something, but why don't the regular I/O paths work?
   也许我错过了什么，但为什么常规的I/O路径不起作用？

A: We do use the regular I/O paths. However we cannot restore the data
to its original location as we load it. That would create an
inconsistent kernel state which would certainly result in an oops.
Instead, we load the image into unused memory and then atomically copy
it back to it original location. This implies, of course, a maximum
image size of half the amount of memory.
   我们使用常规I/O路径。但是，当我们加载数据时，我们无法将数据恢复到其原始位置。这将创建一个不一致的内核状态，
   这肯定会导致oops。相反，我们将镜像加载到未使用的内存中，然后以原子方式将其复制回原始位置。当然，这意味着最大镜像大小是内存大小的一半。

There are two solutions to this:
对此有两种方案：

* require half of memory to be free during suspend. That way you can
read "new" data onto free spots, then cli and copy
  在挂起期间需要一半的内存空闲。这样你就可以将“新”数据读到空闲位置，然后cli(command-line interface?)和copy

* assume we had special "polling" ide driver that only uses memory
between 0-640KB. That way, I'd have to make sure that 0-640KB is free
during suspending, but otherwise it would work...
  假设我们有一个特殊的“轮询”ide驱动程序，它只使用0-640KB之间的内存。这样，我必须确保暂停期间0-640KB是空闲的，否则它会起作用......

suspend2 shares this fundamental limitation, but does not include user
data and disk caches into "used memory" by saving them in
advance. That means that the limitation goes away in practice.
suspend2同样有此基本限制，但不会将用户数据和磁盘缓存包含在“已用内存”中，而是通过提前保存它们。这意味着这种限制在实际消失了。

Q: Does linux support ACPI S4?

A: Yes. That's what echo platform > /sys/power/disk does.

Q: What is 'suspend2'?

A: suspend2 is 'Software Suspend 2', a forked implementation of
suspend-to-disk which is available as separate patches for 2.4 and 2.6
kernels from swsusp.sourceforge.net. It includes support for SMP, 4GB
highmem and preemption. It also has a extensible architecture that
allows for arbitrary transformations on the image (compression,
encryption) and arbitrary backends for writing the image (eg to swap
or an NFS share[Work In Progress]). Questions regarding suspend2
should be sent to the mailing list available through the suspend2
website, and not to the Linux Kernel Mailing List. We are working
toward merging suspend2 into the mainline kernel.
  suspend2是'Software Suspend 2'，是STD的一个分叉实现，可作为swsusp.sourceforge.net的2.4和2.6内核的单独补丁。
  它包括对SMP，4GB highmem和抢占的支持。它还具有可扩展的架构，允许对映像进行任意转换（压缩、加密）
  并允许任意用于写入映像的后端（例如，写到swap或NFS共享[还在开发中]）。
  有关suspend2的问题应该通过suspend2网站发送到邮件列表，而不是发送到Linux内核邮件列表。我们正在努力将suspend2合并到主线内核中。

Q: What is the freezing of tasks and why are we using it?

A: The freezing of tasks is a mechanism by which user space processes and some
kernel threads are controlled during hibernation or system-wide suspend (on some
architectures).  See freezing-of-tasks.txt for details.
   冻结任务是一种机制，通过该机制，在休眠或系统级挂起期间（在某些体系结构上）可以控制用户空间进程和一些内核线程。
   有关详细信息，请参阅freeze-of-tasks.txt。

Q: What is the difference between "platform" and "shutdown"?

A:

shutdown: save state in linux, then tell bios to powerdown

platform: save state in linux, then tell bios to powerdown and blink
          "suspended led"

"platform" is actually right thing to do where supported, but
"shutdown" is most reliable (except on ACPI systems).
在支持的时候，"platform"确实是正确的，但"shutdown"是最可靠的（ACPI系统除外）。

Q: I do not understand why you have such strong objections to idea of
selective suspend.
   我不明白你为什么强烈反对选择性挂起。

A: Do selective suspend during runtime power management, that's okay. But
it's useless for suspend-to-disk. (And I do not see how you could use
it for suspend-to-ram, I hope you do not want that).
   在运行时电源管理期间执行选择性挂起，这没关系。但对于STD，选择性挂起是没用的。
   （而且我不知道怎么用它来STR，我希望你也不要那么考虑）。

Lets see, so you suggest to
让我们看看，所以你建议

* SUSPEND all but swap device and parents
* Snapshot
* Write image to disk
* SUSPEND swap device and parents
* Powerdown
* 挂起所有设备，除了swap设备和其父设备
* 快照
* 写入镜像到磁盘
* 挂起swap设备和其父设备
* 断电

Oh no, that does not work, if swap device or its parents uses DMA,
you've corrupted data. You'd have to do
哦不，这不起作用，如果swap设备或其父设备使用DMA，你已经损坏了数据。你必须这样做

* SUSPEND all but swap device and parents
* FREEZE swap device and parents
* Snapshot
* UNFREEZE swap device and parents
* Write
* SUSPEND swap device and parents
* 挂起所有设备，除了swap设备和其父设备
* 冻结swap设备和其父设备
* 快照
* 解冻swap设备和其父设备
* 写
* 挂起swap设备和其父设备

Which means that you still need that FREEZE state, and you get more
complicated code. (And I have not yet introduce details like system
devices).
这意味着你仍然需要FREEZE状态，并且你会得到更复杂的代码。（我还没有介绍像系统设备这样的细节）。

Q: There don't seem to be any generally useful behavioral
distinctions between SUSPEND and FREEZE.
   SUSPEND和FREEZE之间似乎没有什么重要的行为上的区别。

A: Doing SUSPEND when you are asked to do FREEZE is always correct,
but it may be unnecessarily slow. If you want your driver to stay simple,
slowness may not matter to you. It can always be fixed later.
   你可以在要求FREEZE时总是SUSPEND，这没问题，但会不必要地慢。如果您希望您的驱动保持简单，
   那么缓慢对您来说无关紧要。它总是可以在以后修复。

For devices like disk it does matter, you do not want to spindown for
FREEZE.
对于像磁盘这样的设备就不一样了，你不会想为了FREEZE而spindown的。

Q: After resuming, system is paging heavily, leading to very bad interactivity.
   resume之后，系统在大量的页交换，这会使系统的交互性很差

A: Try running
   试着在resume后运行

cat `cat /proc/[0-9]*/maps | grep / | sed 's:.* /:/:' | sort -u` > /dev/null

after resume. swapoff -a; swapon -a may also be useful.
swapoff -a; swapon -a也可能有效。

Q: What happens to devices during swsusp? They seem to be resumed
during system suspend?
设备在swsusp时发生了什么，它们在系统挂起时有resume吗？

A: That's correct. We need to resume them if we want to write image to
disk. Whole sequence goes like
是的，如果我们想向磁盘写入镜像，我们需要在挂起过程中resume它们。整个过程如下，

      Suspend part
      ~~~~~~~~~~~~
      running system, user asks for suspend-to-disk
      系统运行中，用户发起STD

      user processes are stopped
      用户进程被停止

      suspend(PMSG_FREEZE): devices are frozen so that they don't interfere
      		      with state snapshot
                            设备被冻结从而不能干扰状态快照

      state snapshot: copy of whole used memory is taken with interrupts disabled
                      中断被禁止，并且所有使用中的内存被备份

      resume(): devices are woken up so that we can write image to swap
                设备被唤醒，从而可以写镜像到swap

      write image to swap
      写镜像到交换区

      suspend(PMSG_SUSPEND): suspend devices so that we can power off
                             挂起设备，从而可以断电了

      turn the power off
      断电

      Resume part
      ~~~~~~~~~~~
      (is actually pretty similar)

      running system, user asks for suspend-to-disk
      系统运行，用户发起STD

      user processes are stopped (in common case there are none, but with resume-from-initrd, no one knows)
      用户进程是停止的（在一般情况下没有，但是对于resume-from-initrd，没有人知道）

      read image from disk
      从磁盘读镜像

      suspend(PMSG_FREEZE): devices are frozen so that they don't interfere
      		      with image restoration
                            设备被冻结，防止它们干扰镜像恢复

      image restoration: rewrite memory with image
                         用镜像重写内存

      resume(): devices are woken up so that system can continue
      thaw all user processes
                设备被唤醒，系统接下来解冻所有用户进程

Q: What is this 'Encrypt suspend image' for?

A: First of all: it is not a replacement for dm-crypt encrypted swap.
It cannot protect your computer while it is suspended. Instead it does
protect from leaking sensitive data after resume from suspend.
首先，这不是"dm-crypt encrypted swap"的替代品。"Encrypt suspend image"不能在电脑
挂起后保护你的电脑。相反它防止敏感数据在resume from suspend之后泄漏。

Think of the following: you suspend while an application is running
that keeps sensitive data in memory. The application itself prevents
the data from being swapped out. Suspend, however, must write these
data to swap to be able to resume later on. Without suspend encryption
your sensitive data are then stored in plaintext on disk.  This means
that after resume your sensitive data are accessible to all
applications having direct access to the swap device which was used
for suspend. If you don't need swap after resume these data can remain
on disk virtually forever. Thus it can happen that your system gets
broken in weeks later and sensitive data which you thought were
encrypted and protected are retrieved and stolen from the swap device.
To prevent this situation you should use 'Encrypt suspend image'.
思考如下情形：当一个应用持有敏感信息在内存时，你选择挂起系统。应用本身会阻止数据被
交换出去。然而，挂起过程必须写这些数据到交换区来保证之后的恢复。没有挂起加密，你的
敏感数据会被纯文本形式存储在磁盘上。这意味着，恢复之后，所有对用于挂起的交换区设备
有直接访问的应用都可以访问你的敏感数据。如果你在恢复后不使用交换区，这些数据会永远
保存在磁盘上。这样可能会发生，你的系统数周后奔溃了，你认为被加密保护的敏感数据被从
交换设备中检索并偷窃。为了防止这种情形，你应该使用 'Encrypt suspend image'。

During suspend a temporary key is created and this key is used to
encrypt the data written to disk. When, during resume, the data was
read back into memory the temporary key is destroyed which simply
means that all data written to disk during suspend are then
inaccessible so they can't be stolen later on.  The only thing that
you must then take care of is that you call 'mkswap' for the swap
partition used for suspend as early as possible during regular
boot. This asserts that any temporary key from an oopsed suspend or
from a failed or aborted resume is erased from the swap device.
在挂起时，一个临时密钥被创建，它被用于加密要写入磁盘的数据。在恢复时，当数据被读回内存时，
临时密钥被销毁，意味着之后磁盘中的数据都不再可访问。你唯一要注意的是，在常规启动期间尽可
能早地调用'mkswap'制作用于挂起的交换分区。这断言从交换设备中删除来自中止暂停或来自失败
或中止的恢复的任何临时密钥。

As a rule of thumb use encrypted swap to protect your data while your
system is shut down or suspended. Additionally use the encrypted
suspend image to prevent sensitive data from being stolen after
resume.
根据经验，使用加密的swap分区/文件可在系统关闭或挂起时保护您的数据。
另外，使用加密的挂起映像可以防止敏感数据在恢复后被盗。

Q: Can I suspend to a swap file?
   我可以挂起到交换文件吗

A: Generally, yes, you can.  However, it requires you to use the "resume=" and
"resume_offset=" kernel command line parameters, so the resume from a swap file
cannot be initiated from an initrd or initramfs image.  See
swsusp-and-swap-files.txt for details.
   当然可以。但是你需要使用"resume="和"resume_offset="内核参数。所以，不能从一个initrd或
initramfs镜像中启动一个从交换文件中的恢复过程。

Q: Is there a maximum system RAM size that is supported by swsusp?
   是否有swsusp支持的最大系统RAM大小？

A: It should work okay with highmem.
   即使是高端内存swsusp也可以正常工作。

Q: Does swsusp (to disk) use only one swap partition or can it use
multiple swap partitions (aggregate them into one logical space)?
   swsusp（到磁盘）只使用一个交换分区，还是可以使用多个交换分区（将它们聚合到一个逻辑空间）？

A: Only one swap partition, sorry.
   STD必须使用一整个交换区，而不是多个。

Q: If my application(s) causes lots of memory & swap space to be used
(over half of the total system RAM), is it correct that it is likely
to be useless to try to suspend to disk while that app is running?
   如果我的应用程序导致大量内存和交换空间（超过整个系统RAM的一半）被使用，
   那么在该应用程序运行时尝试STD可能是无用的吗？

A: No, it should work okay, as long as your app does not mlock()
it. Just prepare big enough swap partition.
   不，它应该工作正常，只要你的应用程序没有mlock()它。准备足够大的交换分区。

Q: What information is useful for debugging suspend-to-disk problems?
   有哪些信息可用于调试STD的问题？

A: Well, last messages on the screen are always useful. If something
is broken, it is usually some kernel driver, therefore trying with as
little as possible modules loaded helps a lot. I also prefer people to
suspend from console, preferably without X running. Booting with
init=/bin/bash, then swapon and starting suspend sequence manually
usually does the trick. Then it is good idea to try with latest
vanilla kernel.
   好吧，屏幕上最后的消息总是很有用。如果出问题了，通常是因为某些驱动，因此尽量少加载模块可能会有帮助。
我也喜欢人们从控制台挂起，最好不要运行X。使用init=/bin/bash启动，然后手动使能交换区和启动挂起序列通常可以解决问题。
然后尝试使用最新的内核是个好主意。

Q: How can distributions ship a swsusp-supporting kernel with modular
disk drivers (especially SATA)?
   如何在内核带有模块化的磁盘驱动（尤其是SATA）的版本上运行swsusp？

A: Well, it can be done, load the drivers, then do echo into
/sys/power/disk/resume file from initrd. Be sure not to mount
anything, not even read-only mount, or you are going to lose your
data.
   好吧，它可以完成。加载驱动程序，然后从initrd运行echo来写入到/sys/power/disk/resume文件。
   一定不要挂在任何东西，只读的挂载也不行，否则你将丢失数据。

Q: How do I make suspend more verbose?
   如何让挂起更详细？

A: If you want to see any non-error kernel messages on the virtual
terminal the kernel switches to during suspend, you have to set the
kernel console loglevel to at least 4 (KERN_WARNING), for example by
doing
   如果你想在虚拟终端上看到挂起期间的所有非错误内核信息，你至少要把内核控制台的log级别设置到4(KERN_WARNING)，通过如下方法：

	# save the old loglevel 
	  保存老的log级别
	read LOGLEVEL DUMMY < /proc/sys/kernel/printk
	# set the loglevel so we see the progress bar.
	  设置loglevel，以便我们看到进度条。
	# if the level is higher than needed, we leave it alone.
	  如果级别高于需要，我们不管它。
	if [ $LOGLEVEL -lt 5 ]; then
	        echo 5 > /proc/sys/kernel/printk
		fi

        IMG_SZ=0
        read IMG_SZ < /sys/power/image_size
        echo -n disk > /sys/power/state
        RET=$?
        #
        # the logic here is:
	  这里的逻辑是
        # if image_size > 0 (without kernel support, IMG_SZ will be zero),
	  如果image_size > 0（如果内核不支持，IMG_SZ会是0）
        # then try again with image_size set to zero.
	  然后再尝试将image_size设为0
	if [ $RET -ne 0 -a $IMG_SZ -ne 0 ]; then # try again with minimal image size 
					         #再次尝试最小的镜像大小
                echo 0 > /sys/power/image_size
                echo -n disk > /sys/power/state
                RET=$?
        fi

	# restore previous loglevel
          恢复之前的log级别
	echo $LOGLEVEL > /proc/sys/kernel/printk
	exit $RET

Q: Is this true that if I have a mounted filesystem on a USB device and
I suspend to disk, I can lose data unless the filesystem has been mounted
with "sync"?
   这是真的吗：如果我挂载了一个基于USB的文件系统并且挂起到一个磁盘，我会丢失数据除非文件系统被以"sync"选项挂载

A: That's right ... if you disconnect that device, you may lose data.
In fact, even with "-o sync" you can lose data if your programs have
information in buffers they haven't written out to a disk you disconnect,
or if you disconnect before the device finished saving data you wrote.
   是的。如果你断开那个设备，你可能会丢失数据。事实上，即使"-o sync"，如果你的程序在缓冲区里有没写进
断开的磁盘的数据，或者你在设备保存完你写入的数据前断开，你也可能丢失数据。

Software suspend normally powers down USB controllers, which is equivalent
to disconnecting all USB devices attached to your system.
软件挂起通常断电USB控制器，这等同于给你系统的所有USB设备断电。

Your system might well support low-power modes for its USB controllers
while the system is asleep, maintaining the connection, using true sleep
modes like "suspend-to-RAM" or "standby".  (Don't write "disk" to the
/sys/power/state file; write "standby" or "mem".)  We've not seen any
hardware that can use these modes through software suspend, although in
theory some systems might support "platform" modes that won't break the
USB connections.
当系统处于睡眠状态时，您的系统可能会很好地支持其USB控制器的低功耗模式，使用真正的睡眠模式（如"STR"或“standby”）
来维持连接。（不要将“disk”写入/sys/power/state文件;写入"standby"或"mem"。）
我们没有看到任何可以通过软件挂起使用这些模式的硬件，尽管理论上有些系统可能支持不会破坏USB连接的"platform"模式。

Remember that it's always a bad idea to unplug a disk drive containing a
mounted filesystem.  That's true even when your system is asleep!  The
safest thing is to unmount all filesystems on removable media (such USB,
Firewire, CompactFlash, MMC, external SATA, or even IDE hotplug bays)
before suspending; then remount them after resuming.
请记住，拔掉包含已挂载文件系统的磁盘驱动器总是一个坏主意。即使您的系统处于睡眠状态也是如此！
最安全的做法是在挂起之前卸载可移动介质上的所有文件系统（如USB，Firewire，CompactFlash，MMC，外部SATA，甚至是IDE热插拔托架）;
然后在resume后重新挂载它们。

There is a work-around for this problem.  For more information, see
Documentation/usb/persist.txt.
有一个解决这个问题的方法。更多信息，请参阅Documentation/usb/persist.txt。

Q: Can I suspend-to-disk using a swap partition under LVM?
   我可以使用LVM下的交换分区挂起到磁盘吗？

A: No. You can suspend successfully, but you'll not be able to
resume. uswsusp should be able to work with LVM. See suspend.sf.net.
   不可以。你可以成功挂起，但你无法resume。uswsusp应该能够使用LVM。请参见suspend.sf.net。

Q: I upgraded the kernel from 2.6.15 to 2.6.16. Both kernels were
compiled with the similar configuration files. Anyway I found that
suspend to disk (and resume) is much slower on 2.6.16 compared to
2.6.15. Any idea for why that might happen or how can I speed it up?
   我将内核从2.6.15升级到2.6.16。两个内核都是用类似的配置文件编译。无论如何，
   我发现挂起到磁盘（和resume）在2.6.16比2.6.15慢得多。对于为什么会发生这种情况或者我如何加速它的任何想法？

A: This is because the size of the suspend image is now greater than
for 2.6.15 (by saving more data we can get more responsive system
after resume).
   这是因为挂起镜像的大小现在大于2.6.15（通过保存更多数据，我们可以在恢复后获得响应更快的系统）。

There's the /sys/power/image_size knob that controls the size of the
image.  If you set it to 0 (eg. by echo 0 > /sys/power/image_size as
root), the 2.6.15 behavior should be restored.  If it is still too
slow, take a look at suspend.sf.net -- userland suspend is faster and
supports LZF compression to speed it up further.
有/sys/power/image_size控制镜像的大小。如果将其设置为0（例如，以root权限，通过echo 0 > /sys/power/image_size），
则应该会恢复像2.6.15一样较快的速度。如果它仍然太慢，请查看
suspend.sf.net - userland suspend更快，并支持LZF压缩以进一步加快速度。
